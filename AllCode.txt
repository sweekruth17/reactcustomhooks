import React, { useState, useEffect } from "react";
import MyComponent from "./Func";

function App() {
  const [count, setCount] = useState(0);
  const [flag, setFlag] = useState(true);
  useEffect(() => {
    setTimeout(() => {
      setFlag(false);
    }, 5000);
  }, []);

  return <>{flag && <MyComponent2 />}</>;
}
const useIsOnline = () => {
  const [isOnline, setIsOnline] = useState(window.navigator.onLine);
  useEffect(() => {
    window.addEventListener("online", () => {
      setIsOnline(true);
    });
    window.addEventListener("offline", () => {
      setIsOnline(flase);
    });
  }, [isOnline]);
};

function useInterval({ func, time }) {
  const [t, setT] = useState(time);
  useEffect(() => {
    const temp = setInterval(() => {
      func();
    }, time);
    return () => {
      clearInterval(temp);
    };
  }, [time]);
}

function useDebounce(inputData, time) {
  const [flag, setflag] = useState(flase);
  useEffect(() => {}, [flag]);
  window.addEventListener;
}

function MyComponent2() {
  useEffect(() => {
    // Perform setup or data fetching here
    console.log("My component2 is mounting");

    // the function will run when the component unmounts from the DOM tree.
    const cleanup = () => {
      // Cleanup code (similar to componentWillUnmount)
      console.log("mycomponents is unmounting");
    };

    return cleanup;
  }, []);

  // Render UI
  return (
    <>
      <div>sweekruth</div>
    </>
  );
}

export default App;
